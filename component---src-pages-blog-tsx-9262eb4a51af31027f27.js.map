{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./src/components/DisplayTag.tsx"],"names":["BlogIndex","data","allMarkdownRemark","group","edges","title","site","siteMetadata","location","posts","useState","filter","setFilter","arr","elem","node","frontmatter","tags","includes","clickHandler","e","target","textContent","console","log","str","tag","substr","indexOf","map","fields","slug","key","style","margin","fontFamily","fontSize","display","justifyContent","fontWeight","marginTop","marginBottom","boxShadow","to","fontStyle","date","pageQuery","Pill","styled","button","TitleBar","h4","DisplayTag","className","onClick","fieldValue","totalCount"],"mappings":"+NA+EeA,UAlDG,SAAC,GAKgB,QALdC,KAKc,IAJ/BC,kBAAqBC,EAIU,EAJVA,MAAOC,EAIG,EAJHA,MAERC,EAEW,EAH/BC,KACIC,aAAgBF,MAErBG,EAAgC,EAAhCA,SACOC,EAAQL,EADiB,EAEHM,mBAAS,IAA9BC,EAFwB,KAEhBC,EAFgB,KASzBC,EAAMF,EAASP,EAAMO,QAAO,SAACG,GAAD,OAAUA,EAAKC,KAAKC,YAAYC,KAAKC,SAASP,MAAWF,EAC3F,OACI,kBAAC,IAAD,CAAQD,SAAUA,EAAUH,MAAOA,GAC/B,kBAAC,IAAD,CAAYF,MAAOA,EAAOgB,aATd,SAACC,GACZA,EAAEC,QAAWD,EAAEC,OAAOC,aAAaC,QAAQC,IAAI,oBACpD,IAAMC,EAAML,EAAEC,OAAOC,YACfI,EAAMD,EAAIE,OAAO,EAAGF,EAAIG,QAAQ,OACtChB,EAAUc,MAMLb,EAAIgB,KAAI,YAAc,IAAXd,EAAW,EAAXA,KACFV,EAAQU,EAAKC,YAAYX,OAASU,EAAKe,OAAOC,KACpD,OACI,6BAASC,IAAKjB,EAAKe,OAAOC,MACtB,gCACI,wBACIE,MAAO,CACHC,OAAQ,EACRC,WAAY,aACZC,SAAU,SACVC,QAAS,OACTC,eAAgB,kBAGpB,kBAAC,IAAD,CAAML,MAAO,CACTM,WAAY,IACZC,UAAW,EACXC,aAAc,EACdC,UAAW,QACZC,GAAI5B,EAAKe,OAAOC,MACd1B,GAEL,2BAAO4B,MAAO,CAAEM,WAAY,IAAKK,UAAW,WAAc7B,EAAKC,YAAY6B,cAYpG,IAAMC,EAAY,c,kCCjFzB,qCAGMC,EAAOC,UAAOC,OAAV,mEAAGD,CAAH,yFAOJE,EAAWF,UAAOG,GAAV,uEAAGH,CAAH,mDAkBCI,IAbI,SAAC,GAA4B,IAA1BjD,EAA0B,EAA1BA,MAAOgB,EAAmB,EAAnBA,aACzB,OACI,yBAAKkC,UAAU,QACX,kBAACH,EAAD,YACC/C,EAAM0B,KAAI,SAAAH,GAAG,OAAK,kBAACqB,EAAD,CACfO,QAASnC,EACTa,IAAKN,EAAI6B,YAAa7B,EAAI6B,WAFX,KAEyB7B,EAAI8B,WAF7B","file":"component---src-pages-blog-tsx-9262eb4a51af31027f27.js","sourcesContent":["import React, { useState } from 'react';\nimport Layout from '../components/layout';\n// Gatsby supports TypeScript natively!\nimport { PageProps, Link, graphql } from \"gatsby\"\nimport DisplayTag from \"../components/DisplayTag\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n    site: {\n        siteMetadata: {\n            title: string\n        }\n    }\n    allMarkdownRemark: {\n        edges: {\n            node: {\n                excerpt: string\n                frontmatter: {\n                    title: string\n                    date: string\n                }\n                fields: {\n                    slug: string\n                }\n            }\n        }[]\n    }\n}\n\nconst BlogIndex = ({ data: {\n    allMarkdownRemark: { group, edges },\n    site: {\n        siteMetadata: { title },\n    },\n}, location }: PageProps<Data>) => {\n    const posts = edges\n    const [filter, setFilter] = useState('')\n    const handleClick = (e) => {\n        if (!e.target || !e.target.textContent) console.log('nothing selected');\n        const str = e.target.textContent;\n        const tag = str.substr(0, str.indexOf(' ('))\n        setFilter(tag);\n    }\n    const arr = filter ? edges.filter((elem) => elem.node.frontmatter.tags.includes(filter)) : posts\n    return (\n        <Layout location={location} title={title}>\n            <DisplayTag group={group} clickHandler={handleClick} />\n            {arr.map(({ node }) => {\n                const title = node.frontmatter.title || node.fields.slug\n                return (\n                    <article key={node.fields.slug}>\n                        <header>\n                            <h3\n                                style={{\n                                    margin: 0,\n                                    fontFamily: 'sans-serif',\n                                    fontSize: '1.2rem',\n                                    display: 'flex',\n                                    justifyContent: 'space-between',\n                                }}\n                            >\n                                <Link style={{\n                                    fontWeight: 400,\n                                    marginTop: 2,\n                                    marginBottom: 2,\n                                    boxShadow: `none`\n                                }} to={node.fields.slug}>\n                                    {title}\n                                </Link>\n                                <small style={{ fontWeight: 500, fontStyle: 'italic', }}>{node.frontmatter.date}</small>\n                            </h3>\n                        </header>\n                    </article>\n                )\n            })}\n        </Layout >\n    )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        group(field: frontmatter___tags) {\n            fieldValue\n            totalCount\n          }        \n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react';\nimport styled from 'styled-components'\n\nconst Pill = styled.button`\n    background: gray;\n    color: white;\n    margin: 0 4px;\n    border-radius: 12px;\n    font-family: sans-serif;\n`\nconst TitleBar = styled.h4`\n    font-family: sans-serif;\n    letter-spacing: normal;\n`\n\nconst DisplayTag = ({ group, clickHandler }) => {\n    return (\n        <div className='tags'>\n            <TitleBar>Tags\n            {group.map(tag => (<Pill\n                onClick={clickHandler}\n                key={tag.fieldValue}>{tag.fieldValue} ({tag.totalCount})</Pill>\n            ))}\n            </TitleBar>\n        </div>\n    )\n}\n\nexport default DisplayTag"],"sourceRoot":""}