{"componentChunkName":"component---src-templates-blog-post-js","path":"/swe-hiring-platoform/","result":{"data":{"site":{"siteMetadata":{"title":"Anny's comics"}},"markdownRemark":{"id":"dbae20b5-104d-5daa-9117-bde87688174f","html":"<p>In the spirit of learning what’s new and latest in the world of two-sided markets, I explored online platforms that connect employers and software engineers. Hiring platforms such as <a href=\"https://hired.com\">Hired</a> and <a href=\"https://triplebyte.com/candidates\">TripleByte</a> all tackle the problem differently. Furthermore it’s also good to practice coding questions on <a href=\"https://leetcode.com\">LeetCode</a>. Here’s some lowlights and highlights of my exploration on LeetCode, Hired and a short fling with TripleByte.</p>\n<h1>Experiences</h1>\n<p>The most annoying thing: each online job seeker platform have a lengthy separate setup time and upkeep: Hired requires vigilant upkeep to accept interview invites, and Triplebyte demands answering a quiz plus additional programming excises. These are taxing on the job seeker, who, if living in the Bay Area and is well-connected, already has many other recruiters sending phone requests to in their inbox.</p>\n<p><strong>Hired</strong></p>\n<p>There is little differentiation between companies when they hire through a platform: any posting looking for a software engineer of a certain domain asks for a similar set of technologies, hence all the companies look similar.\nThe companies I interviewed with on Hired are venture-funded startups, and while I enjoyed interviewing with them and received offers, I turned them down to take a different position within Salesforce, my then-employer.\nInitial non-technical phone screens were time intensive, and it’s not really clear what is the value-add to the job seeker.\nTake home exercises weeds out candidates who don’t do free exercise, or who are interviewing with multiple companies. You can read about <a href=\"../Why-I-refuse-to-do-take-home-programming-assignments-for-programming-interviews/\">my stance in take-home exercises here</a>.</p>\n<p><strong>TripleByte</strong></p>\n<p>The major selling point of this platform is the job seeker goes directly to tech screens with the companies, skipping the non-technical initial call. Before all that, the job seeker has to clear a programming exercise, then a programming interview with TripleByte. While the programming exercise was short and sweet, the interview was long, around 90 minutes, and involved me live-coding a UI component while screen-sharing, plus quizzes on front end technologies including CSS. It was good preparation for future technical interviews. Even though I did not advance to the next step, it was a positive experience, since the detailed feedback on what could have been better was valued. Since most interviews don’t even provide feedback, TripleByte came out ahead.</p>\n<p><strong>LeetCode</strong></p>\n<p>I am a big fan of crunching through programming exercises, and LeetCode especially shines when you want to become confident for technical interviews. These are core Computing Science programming questions, including how to implement a tree, how to balance it, etc. Preparing for these fundamental questions is essential, as I found out during my Microsoft Software Engineer interview. I’ve through the Easy and Medium exercises in JavaScript, and given the quirkiness of the language, developed some nice talks as a result, especially <a href=\"https://dev.to/heroku/javascript-quirks-numbers-edition-3ppa\">my talk on JavaScript Numbers</a>.</p>\n<h1>Highlights</h1>\n<p><strong>Hired</strong></p>\n<p>I liked the breakdown of which industry the company is in, and the number of engineers; the latter differentiates the startups from more mature companies.\nInterviewing mainly with startups, I enjoyed the direct access to CEO/CTOs. It was great to pick their brains on what the startup life is like, and whether I’d like to be in their shoes.</p>\n<p><strong>TripleByte</strong></p>\n<p>Big fan of taking the practice programming interview, since the feedback is valuable.</p>\n<p><strong>LeetCode</strong></p>\n<p>I love the gamification of getting points for completing problems, and seeing myself advance on the leaderboard. Also enjoy the breadth of programming exercises. A good platform to review core Computing Science problems, and/or to learn about the <a href=\"https://dev.to/heroku/javascript-quirks-numbers-edition-3ppa\">quirks of the language</a>.</p>","frontmatter":{"title":"Experiences with Hired, TripleByte, and LeetCode","date":"April 22, 2019"}}},"pageContext":{"slug":"/swe-hiring-platoform/","previous":{"html":"<p>Take home problems, in which a company asks a prospective engineer to complete at the engineer’s leisure, has aggravated me on several accounts. These are the arguments against it.</p>\n<p><strong>Assumptions of the interviewer who assigns a take home assignment</strong></p>\n<p>a) the interviewee has time to implement the solution, AND</p>\n<p>b) the interviewee is interviewing few companies at a time.</p>\n<p>If both assumptions are true, AND the take home is something the interviewee can feature in their portfolio, AND the company decides to go forward after reviewing the take home, THEN the take home can enhance the interview experience.</p>\n<p>As for me, both assumptions were false when I actively interviewed. I was working full time, so implementing all the take home assignments was infeasible. Plus I was getting more interview requests than I can handle <em>without</em> implementing any of the take homes.</p>\n<p>The market in software engineers in the Bay Area (especially where I live, in San Francisco) is red-hot.</p>\n<p><strong>A sample of take home assignments I encountered</strong></p>\n<p>You might be curious: what were the take home assignments? I was asked to code in HackerRank, implement a note-taking app, and implement Scrabble in whichever web technology I saw fit.</p>\n<p>The <strong>HackerRank</strong> problems were short. Other than learning to use the online interface (which excluded many of the built-in features of my text editor), was fairly efficient. I almost felt good with the rapid validation of the provided test cases.</p>\n<p>As for the <strong>Scrabble</strong> game, I never played the game before. It would have been a great project for an engineer who loved the game and who can feature it as a portfolio piece. For me, the cost of implementing a new game dwarfed the potential upside of netting another interview, since another half a dozen companies were vying for my attention.</p>\n<p>I passed on the take home, and the company passed on me.</p>\n<p>The most egregious assigment was the <strong>note-taking app</strong>. The company-provided guidelines suggested it would “take 4 hourst to implement”. The guidelines also included UI mockups. To make an app that is functional, looks good, and with tests, took around 8 hours. I spent a Saturday colocated with my boyfriend but staring at the screen, working on the app from 11am, taking breaks for food, and submitting it red-eyed at 11pm. My boyfriend and I manually tested the app, and I fixed the found bugs by writing automated unit tests.</p>\n<p><em>What was the reward of my good work?</em></p>\n<p>The reward of clean and tested code, after a day of review, was: “we are not moving forward because there are bugs in the app”. Which bugs, I asked? The recruiter was kind enough to relay the bugs from the lead front end engineer. None of the bugs were reproducible on my setup. It renewed my appreciation for support workers, who have to ask many questions to reproduce the problem ie. which version of operating system, which version of which browser, etc.</p>\n<p>Both my time and the potential upside of this interaction was limited, so I let it drop. Besides, I was not moving forward in the interview process after sinking an entire Saturday into an app that was not meant to be re-usable.</p>\n<p>I felt really bad for not wowing them, and for the sank cost of a Saturday.</p>\n<p><strong>My thoughts when the interviewer suggests a take home assignment</strong></p>\n<ol>\n<li>What is the assignment? I am curious</li>\n<li>The problem sounds remotely interesting; say yes to see what the details are</li>\n<li>Realize that implementing the solution takes TIME: sheepishly negotiate for another way to proceed</li>\n<li>Interviewer says the take home is part of their hiring process</li>\n<li>Drop out of the hiring process from not completing the exercise</li>\n</ol>\n<p><strong>Alternatives to the take home</strong></p>\n<p><em>Code with an interviewer who is an engineer.</em></p>\n<p>The rapid feedback is valuable; even if the interviewee doesn’t proceed to the next round, he/she will know how they can improve by the end of the hour.</p>\n<p><em>Ask how they would would implement a solution.</em></p>\n<p>This way the interviewer can cover more ground.</p>\n<p><em>Interview on-site.</em></p>\n<p>Yes this is a costly for the interviewee <em>and</em> the interviewer. The upside is also big, since the on-site is a great place to showcase team culture.</p>\n<p>If you are reading this and is a decision-maker on the interview process at your company, consider removing the take home assignment to streamline the process. The cost of keeping the take home is a smaller pool of candidates. It can be done right given the right candidate, but is not the best in the red-hot engineering market of the Bay Area.</p>","fields":{"slug":"/I-refuse-to-do-take-home-programming-assignments/"},"frontmatter":{"title":"Why I refuse to do take home programming assignments for interviews"}},"next":{"html":"<p>After several years of emotional shopping I need a break. Thanks to sites like <a href=\"https://www.thredup.com/\">thredup</a>, <a href=\"https://poshmark.com\">poshmark</a>, and <a href=\"https://www.ebay.com/\">eBay</a>, I spent countless hours browsing online, resulting in overflowing closets, mindless spending, and less savings. Why is less savings troubling? A dollar invested today, assuming a 7% growth rate, <a href=\"http://www.moneychimp.com/features/rule72.htm\">will double in 10 years</a>.\nInspired by the <a href=\"https://caitflanders.com/shopping-ban/\">shopping ban by Cate Flanders</a>, I designed a shopping ban for myself, with custom rules.</p>\n<h3>The Rules</h3>\n<p>For simplicity there are two buckets of spending: one is banned, another not banned.</p>\n<h5>Banned categories:</h5>\n<ul>\n<li><strong>clothing</strong>: it feels bad spending good money on emotional purchases, meaning purchases made when I felt lonely, homesick, or bored. Instead of shopping for clothes I will call my parents and forge stronger relationships. Additionally I will use the saved time to develop programming and drawing skills, and investing knowledge</li>\n<li><strong>art supplies</strong>: After a buying-spree on colored markers, I’m good for a few years</li>\n<li><strong>online courses</strong>: I’ve considered paying for <a href=\"https://www.skillshare.com\">Skillshare</a> for drawing courses and <a href=\"https://www.pluralsight.com/\">Pluralsight</a> for technical knowledge, however their free content is sufficient. I use <a href=\"https://sfpl.org/research-learn/elearning\">LinkedIn Learning, it is free with my library membership</a>; LinkedIn Learning has good courses on technology and personal finance. Additionally I already have an annual subscription for <a href=\"https://www.datacamp.com/\">DataCamp</a>, and they specialize in Python and Data Science. </li>\n</ul>\n<h5>Categories outside the ban:</h5>\n<ul>\n<li><strong>food</strong>: my monthly expenditure is already low</li>\n<li><strong>travel</strong>: my budget is already &#x3C; $1000/year</li>\n<li><strong>books</strong>: I have a soft spot for buying used books. I read 80% of the books I buy, and on average they cost &#x3C; $10 each</li>\n</ul>\n<p>Looking forward to a year of less spending, less clutter, and more savings!</p>","fields":{"slug":"/shopping-ban/"},"frontmatter":{"title":"Year-long Shopping ban, from 4/2020 to 4/2021"}}}}}