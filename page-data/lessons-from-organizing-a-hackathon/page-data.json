{"componentChunkName":"component---src-templates-blog-post-js","path":"/lessons-from-organizing-a-hackathon/","result":{"data":{"site":{"siteMetadata":{"title":"Anny's comics"}},"markdownRemark":{"id":"68389189-3c07-5e09-b517-ca6c095daa88","html":"<p>I organized a geographically-distributed, week-long hackathon at Salesforce. Why did I do it? Because I wanted to do a hack, and the bigger company-wide hackathons were only twice a year. At Salesforce, hackathons are the perfect place to showcase one’s ingenuity: Every hack has the potential to become implemented at work. Hence I heeded the famous saying: “if you want something to happen, do it yourself”.</p>\n<p>This was my first time organizing a hackathon. Here’s what I learnd from trial by fire.</p>\n<p><strong>1. Executive buy-in is crucial</strong></p>\n<p>The hackathon was sponsored partially to help meet our VP’s targets. While metrics were the impetus, the output of the hackathon, including the knowledge that the team gained from participation, and the demos, were worth much more than the food and prize budget.</p>\n<p><strong>2. Have at least three organizers</strong></p>\n<p>Have one person close to the funding source, one who setups up and operate the AV, and at least one champion per different location. Different job roles also helped: we made the hackathon a week long because the operations person mentioned 24 hours in a week is much more flexible than any strict day. The change of duration gave us an unprecedented number of entries, double the amount expected for an inaugural hackathon.</p>\n<p><strong>3. Delegate, delegate, delegate</strong></p>\n<p>Since I was the champion for the project, the onus was on me to make it happen. I tapped into the wide variety of skills and the deep expertise of our team. Request for judges, t-shirt design, and lunch order + pickup were handled by team mates. Their contributions made the hackathon a success.</p>\n<p><strong>4. Mine the previous hackathon organizers’ experience</strong></p>\n<p>I reached out to the organizer of the company-wide hackathon. She has been running multiple hackathons per year for several years. How to convert teams to participants, which system to use for signup and video upload, and the format of the final judging were only the tip of the iceberg. While there was much to digest, standing on the shoulders of giants gave me the confidence to continue.</p>\n<p><strong>5. Leverage temporary authority to build relationships</strong></p>\n<p>Having the responsibility to spearhead the hackathon, and the VP-approved authority to make it happen, gave me the impetus to talk to many people. Hackathon was our shared topic. If the person is technical, I asked about their ideas and the progress of their project. If they were more on the business side, I encouraged them to join a team to give feedback. Or at least come to the final judging, to feast on the free food and be amazed by the bright technical minds of our organization. Because of my hallway/water cooler talks, more people know me by name, and it feels good to be acknowledged in the hallway.</p>\n<p><strong>6. Go where others fear to tread</strong></p>\n<p>Organizing the hackathon was a ton of work, since it involved various people and leveraging their expertise. I was also contestant in the hacakthon, and did my regular work as a software engineer. It was my busiest week so far at Salesforce. But I don’t fear being busy. Few people would organize AND compete in the same hackathon. Yet it is precisely because so few people would even consider organizing the event, that made driving this event worthwhile. </p>\n<p>Overall it was a high-profile networking experience. Our VP thanked me on front of all the participants and judges, and the output of the hackathon will be treasured for the years to come. I learned much from championing the first hackathon of our team. </p>","frontmatter":{"title":"6 Lessons from Organizing a Hackathon","date":"January 20, 2018"}}},"pageContext":{"slug":"/lessons-from-organizing-a-hackathon/","previous":{"html":"<p>In short: I forge relationships and market our product.</p>\n<p>Why market the product? Because marketing makes technology sexy, the same way Ginger Rogers made Fred Astaire sexy. Also no one is doing marketing for my team yet. Besides me. Prime time for learning. </p>\n<p>Here is a sample of what I did for my team in 2017, outside of coding. Did I mention all of these are volunteer work, aka no one asked me to do it? </p>\n<ol>\n<li>Conceived and organized a <a href=\"https://www.meetup.com/visualizemydata/events/238756680/\">meetup</a> to gather user feedback about our open source project <a href=\"https://github.com/salesforce/refocus\">refocus</a></li>\n<li>Conceived and organized the knowledge sharing session between Site Reliability Tools in Salesforce and the equivalent team at Lyft</li>\n<li><a href=\"https://www.youtube.com/watch?v=hPBK-qaGFKI\">Spoke and demoed</a> our open source project <a href=\"https://github.com/salesforce/refocus\">refocus</a> at two conferences</li>\n<li>Procured board games at our workspace to enliven the space and get creative juices flowing</li>\n<li>Organized and stepped in last minute to present <a href=\"https://github.com/salesforce/refocus\">refocus</a> at the internal Tech Talk, and demoed its sky-is-the-limit customizability</li>\n<li>Organized the inaugural hackathon at our department</li>\n<li>Wrote and published the blog post on <a href=\"https://engineering.salesforce.com/https-medium-com-annyhe-nerdy-new-years-resolution-share-your-technical-project-at-a-conference-5c2719d3684c\">how to promote technology projects at conferences</a>, published on Salesforce Engineering blog.</li>\n</ol>\n<p>Notice a pattern? These are all transferable skills that I can apply elsewhere in my career. It also helps that I have the team’s and the management’s support: my team attended the first conference talk, and the company paid for the second conference trip. My manager’s manager congratulated me on the published blog post, and the Lyft knowledge share was also mentioned at the VP level. What I do makes our team and the company look good.</p>\n<p>If you were wondering whether I slacked off at my regular job, I did not. These are all on top of regular coding work. I also stepped in and remediated the void created by the departure of a senior developer. I acquire soft skills on top of technical chops. </p>\n<p>Do I expect each one of my efforts to be rewarded by the management? That would be nice. However it is my career that I am building, and nothing beats learning on the job. </p>","fields":{"slug":"/what-i-do-at-work/"},"frontmatter":{"title":"What do I do besides writing code at work?"}},"next":{"html":"<p>Take home problems, in which a company asks a prospective engineer to complete at the engineer’s leisure, has aggravated me on several accounts. These are the arguments against it.</p>\n<p><strong>Assumptions of the interviewer who assigns a take home assignment</strong></p>\n<p>a) the interviewee has time to implement the solution, AND</p>\n<p>b) the interviewee is interviewing few companies at a time.</p>\n<p>If both assumptions are true, AND the take home is something the interviewee can feature in their portfolio, AND the company decides to go forward after reviewing the take home, THEN the take home can enhance the interview experience.</p>\n<p>As for me, both assumptions were false when I actively interviewed. I was working full time, so implementing all the take home assignments was infeasible. Plus I was getting more interview requests than I can handle <em>without</em> implementing any of the take homes.</p>\n<p>The market in software engineers in the Bay Area (especially where I live, in San Francisco) is red-hot.</p>\n<p><strong>A sample of take home assignments I encountered</strong></p>\n<p>You might be curious: what were the take home assignments? I was asked to code in HackerRank, implement a note-taking app, and implement Scrabble in whichever web technology I saw fit.</p>\n<p>The <strong>HackerRank</strong> problems were short. Other than learning to use the online interface (which excluded many of the built-in features of my text editor), was fairly efficient. I almost felt good with the rapid validation of the provided test cases.</p>\n<p>As for the <strong>Scrabble</strong> game, I never played the game before. It would have been a great project for an engineer who loved the game and who can feature it as a portfolio piece. For me, the cost of implementing a new game dwarfed the potential upside of netting another interview, since another half a dozen companies were vying for my attention.</p>\n<p>I passed on the take home, and the company passed on me.</p>\n<p>The most egregious assigment was the <strong>note-taking app</strong>. The company-provided guidelines suggested it would “take 4 hourst to implement”. The guidelines also included UI mockups. To make an app that is functional, looks good, and with tests, took around 8 hours. I spent a Saturday colocated with my boyfriend but staring at the screen, working on the app from 11am, taking breaks for food, and submitting it red-eyed at 11pm. My boyfriend and I manually tested the app, and I fixed the found bugs by writing automated unit tests.</p>\n<p><em>What was the reward of my good work?</em></p>\n<p>The reward of clean and tested code, after a day of review, was: “we are not moving forward because there are bugs in the app”. Which bugs, I asked? The recruiter was kind enough to relay the bugs from the lead front end engineer. None of the bugs were reproducible on my setup. It renewed my appreciation for support workers, who have to ask many questions to reproduce the problem ie. which version of operating system, which version of which browser, etc.</p>\n<p>Both my time and the potential upside of this interaction was limited, so I let it drop. Besides, I was not moving forward in the interview process after sinking an entire Saturday into an app that was not meant to be re-usable.</p>\n<p>I felt really bad for not wowing them, and for the sank cost of a Saturday.</p>\n<p><strong>My thoughts when the interviewer suggests a take home assignment</strong></p>\n<ol>\n<li>What is the assignment? I am curious</li>\n<li>The problem sounds remotely interesting; say yes to see what the details are</li>\n<li>Realize that implementing the solution takes TIME: sheepishly negotiate for another way to proceed</li>\n<li>Interviewer says the take home is part of their hiring process</li>\n<li>Drop out of the hiring process from not completing the exercise</li>\n</ol>\n<p><strong>Alternatives to the take home</strong></p>\n<p><em>Code with an interviewer who is an engineer.</em></p>\n<p>The rapid feedback is valuable; even if the interviewee doesn’t proceed to the next round, he/she will know how they can improve by the end of the hour.</p>\n<p><em>Ask how they would would implement a solution.</em></p>\n<p>This way the interviewer can cover more ground.</p>\n<p><em>Interview on-site.</em></p>\n<p>Yes this is a costly for the interviewee <em>and</em> the interviewer. The upside is also big, since the on-site is a great place to showcase team culture.</p>\n<p>If you are reading this and is a decision-maker on the interview process at your company, consider removing the take home assignment to streamline the process. The cost of keeping the take home is a smaller pool of candidates. It can be done right given the right candidate, but is not the best in the red-hot engineering market of the Bay Area.</p>","fields":{"slug":"/I-refuse-to-do-take-home-programming-assignments/"},"frontmatter":{"title":"Why I refuse to do take home programming assignments for interviews"}}}}}